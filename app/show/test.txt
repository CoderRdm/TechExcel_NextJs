"use client";

import { useEffect, useState } from 'react';
import axios from 'axios';
import { useRouter } from 'next/navigation';
import { Camera, Edit2, Trash2, Eye, Plus } from "lucide-react";

const UserPage = () => {
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const router = useRouter();

  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        const token = localStorage.getItem('token');
        const userId = localStorage.getItem('userId');

        if (!token || !userId) {
          throw new Error('No authentication found');
        }

        const response = await axios.get(`http://localhost:3000/api/templates/user/${userId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        setTemplates(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Fetch Error:', error.response?.data || error.message);
        setLoading(false);
        
        if (error.response?.status === 401) {
          localStorage.clear();
          router.push('/login');
        } else {
          setError(error.response?.data?.error || 'Failed to fetch templates');
        }
      }
    };

    fetchTemplates();
  }, [router]);

  const handleShow = (templateId) => {
    router.push(`/templates/show/${templateId}`);
  };

  const handleEdit = (e, templateId) => {
    e.stopPropagation();
    router.push(`/templates/edit/${templateId}`);
  };

  const handleDelete = async (e, templateId) => {
    e.stopPropagation();
    if (window.confirm('Are you sure you want to delete this template?')) {
      try {
        const token = localStorage.getItem('token');
        await axios.delete(`http://localhost:3000/api/deletetemplate/${templateId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        setTemplates(prev => prev.filter(t => t.id !== templateId));
      } catch (error) {
        console.error('Delete Error:', error.response?.data || error.message);
        if (error.response?.status === 401) {
          localStorage.clear();
          router.push('/login');
        }
      }
    }
  };

  const handleCreateNew = () => {
    router.push('/templates/new');
  };

  if (error) return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="bg-gray-800 p-8 rounded-xl text-center">
        <div className="text-red-400 text-xl mb-4">Error</div>
        <p className="text-gray-300 mb-6">{error}</p>
        <button
          onClick={() => router.push('/login')}
          className="px-6 py-2 bg-purple-600 rounded-lg hover:bg-purple-700 transition-colors"
        >
          Go to Login
        </button>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Animated Background */}
      <div className="fixed inset-0 -z-10 opacity-20">
        <div className="absolute inset-0 bg-gradient-to-br from-purple-900 via-indigo-900 to-blue-900" />
        <div className="absolute top-0 left-0 w-64 h-64 bg-purple-600 rounded-full blur-3xl animate-pulse" />
        <div className="absolute top-0 right-0 w-72 h-72 bg-blue-600 rounded-full blur-3xl animate-pulse delay-1000" />
      </div>

      <div className="max-w-7xl mx-auto px-4 py-12">
        {/* Header */}
        <div className="mb-12 text-center">
          <h1 className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-4">
            My Templates
          </h1>
          <button
            onClick={handleCreateNew}
            className="px-6 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg transition-colors flex items-center gap-2 mx-auto"
          >
            <Plus className="w-5 h-5" />
            Create New Template
          </button>
        </div>

        {/* Templates Grid */}
        {templates.length === 0 ? (
          <div className="text-center py-24 text-gray-400">
            <Camera className="w-16 h-16 mx-auto mb-4 text-purple-500" />
            No templates found. Start by creating a new one!
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {templates.map((template) => (
              <div
                key={template.id}
                onClick={() => handleShow(template.id)}
                className="group relative bg-gray-800 rounded-xl p-6 cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-purple-500/10 border border-gray-700"
              >
                {/* Card Content */}
                <div className="absolute inset-0 bg-gradient-to-br from-purple-900/20 to-pink-900/20 opacity-0 group-hover:opacity-100 rounded-xl transition-opacity" />
                
                <div className="flex justify-between items-start mb-4">
                  <h3 className="text-xl font-semibold text-gray-100 truncate pr-4">
                    {template.about || `Template ${template.id}`}
                  </h3>
                  <span className="text-xs px-2 py-1 bg-gray-700 text-gray-300 rounded-full">
                    {new Date(template.metadata?.created).toLocaleDateString()}
                  </span>
                </div>

                <div className="space-y-4 text-gray-300">
                  {/* Header Preview */}
                  {template.header?.[0] && (
                    <div className="flex items-center gap-2">
                      <Camera className="w-5 h-5 text-pink-400" />
                      <div className="truncate">
                        <p className="truncate">{template.header[0].name}</p>
                        <p className="text-xs text-gray-400 truncate">
                          {template.header[0].city}, {template.header[0].country}
                        </p>
                      </div>
                    </div>
                  )}

                  {/* Skills Preview */}
                  {template.sections?.skills?.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {template.sections.skills.slice(0, 3).map((skill, i) => (
                        <span 
                          key={i}
                          className="px-2 py-1 bg-gray-700 rounded-full text-xs text-blue-300"
                        >
                          {skill.name}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* Experience Preview */}
                  {template.experiences?.[0] && (
                    <div className="text-sm space-y-1">
                      <p className="font-medium text-gray-100">Recent Experience</p>
                      <p className="truncate">
                        {template.experiences[0].jobTitle} at {template.experiences[0].company}
                      </p>
                    </div>
                  )}
                </div>

                {/* Action Buttons */}
                <div className="absolute top-4 right-4 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={(e) => handleEdit(e, template.id)}
                    className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
                    title="Edit"
                  >
                    <Edit2 className="w-5 h-5 text-blue-400" />
                  </button>
                  <button
                    onClick={(e) => handleDelete(e, template.id)}
                    className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
                    title="Delete"
                  >
                    <Trash2 className="w-5 h-5 text-red-400" />
                  </button>
                </div>

                {/* Footer */}
                <div className="mt-4 flex items-center justify-between text-sm text-gray-400">
                  <span className="flex items-center gap-1">
                    <Eye className="w-4 h-4" />
                    <span>{template.views || 0} views</span>
                  </span>
                  <span className="px-2 py-1 bg-gray-700 rounded-full text-xs">
                    {Object.keys(template.sections || {}).length} sections
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default UserPage;